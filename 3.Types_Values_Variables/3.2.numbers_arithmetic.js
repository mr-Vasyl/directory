Math.pow(2,53) // => 9007199254740992: 2 в степени 53
Math.round(.6) // => 1.0: округляет до ближайшего целого
Math.ceil(.6) // => 1.0: округляет в большую сторону до целого
Math.floor(.6) // => 0.0: округляет в меньшую сторону д о целого
Math.abs(-5) // => 5: абсолютная величина
Math.max(x,y,z) // Возвращает наибольший аргумент
Math.min(x,y,z) // Возвращает наименьший аргумент
Math.random() // Псевдослучайное число х , где О <= х < 1 . О
Math.PI // π: длина окружности , деленная на диаметр
Math.E // е : основание натураль ного логарифма
Math.sqrt(3) // => 3 * * 0 . 5 : квадратный корень из 3
Math.pow(3, 1/3) // 3 * * ( 1 / 3 ) : кубический корень и з 3
Math.sin(0) // Тригонометрия : также есть Math . cos , Math . atan и т . д .
Math.log(10) // Натуральный логарифм 10
Math.log(100)/Math.LN10 // Десятичный логарифм 100
Math.log ( 512 ) /Math.LN2 // Двоичный логарифм 512
Math.exp ( 3 ) // Math.E в кубе
Math.cbrt(27) // => 3: кубический корень
Math.hypot(3, 4) // => 5: квадратный корень ИЗ суммы квадратов всех аргументов
Math.log10(100) // => 2: десятичный логарифм
Math.log2(1024) // => 10: двоичный логарифм
Math.log1p(x) // Натураль ный логарифм ( 1 + х ) ; точен для очень малых х
Math.expm1(x) // Math.exp(x) - 1 ; инверсия Math.loglp( )
Math.sign(x) // -1 , О или 1 для аргументов <, == или > О
Math.imul(2,3) // => 6: оптимизированное умножение 32-битных целых чисел
Math.clz32(0xf) // => 28: количество в едущих нулевых бит в 32-битном целом числе
Math.trunc(3.9) // => 3: преобразует в целое число, отбрасывая дробную часть
Math.fround(x) // Округляет до ближайшего 32-битного числа с плавающей точкой
Math.sinh(x) // Гиперболический синус . також Math.cosh(), Math.tanh()
Math.asinh(x) // Гиперболический арксинус . Also Math.acosh(), Math.atanh()

infinity // Положительное число , слишком большое для представления
console.log(Number.isNaN(4)) // чи значення являється NaN

let zero = 0; // Regular zero
let negz = -0; // Negative zero
zero === negz // => true: zero and negative zero are equal
1/zero === 1/negz // => false: Infinity and -Infinity are not equal

console.log(BigInt()) // сделать возможным представление 64-битных целых чисел

let timestamp = Date.now(); // Текущее время как отметка времени (число ).
let now = new Date(); // Tекущее время как объект Date.
let ms = now.getTime(); // Преобразовать в миллисекундную отметку времени
let iso = now.toISOString(); // Преобразовать в строку со стандартным форматом
console.log(timestamp,now,ms,iso);